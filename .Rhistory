#Anwendung von Funktionen aus Aufgabe 2.a
#i)
analyse_metrisch(titanic$Age)
#ii)
analyse_kategorial(titanic$Survived)
#Anwendung von Funktionen aus Aufgabe 2.a
#i)
analyse_metrisch(titanic$Age)
analyse_metrisch(titanic$Fare)
#Anwendung von Funktionen aus Aufgabe 2.a
#i)
analyse_metrisch(titanic$Age)
variable <- convertToFactor(variable) # Umwandlung falls nötig
variable = titanic$Age
variable <- convertToFactor(variable) # Umwandlung falls nötig
source("~/GitHub/GitHub-Projekt---Wissenschaftliches-Arbeiten-24-25/Funktionen_R-Skript1.R")
variable <- convertToFactor(variable) # Umwandlung falls nötig
statistiken <- list(
Mittelwert = mean(variable, na.rm = TRUE), # Mittelwert
Median = median(variable, na.rm = TRUE), # Median
Standardabweichung = sd(variable, na.rm = TRUE), # Standardabweichung
Minimum = min(variable, na.rm = TRUE), # Minimum
Maximum = max(variable, na.rm = TRUE), # Maximum
Quartile = quantile(variable, probs = c(0.25, 0.75), na.rm = TRUE),
# unteres und oberes Quartil
range = max(variable, na.rm = TRUE) - min(variable, na.rm = TRUE),
# range/ Spannweite
Interquartilsabstand = IQR(variable, na.rm = TRUE),
# Interquartilsabstand (oberes Quartil - unteres Quartil)
Modus = berechneModus(variable) # Nutzung der Modus-Helferfunktion
)
variable = titanic$Age
variable <- convertToFactor(variable) # Umwandlung falls nötig
Mittelwert = mean(variable, na.rm = TRUE)
#Anwendung von Funktionen aus Aufgabe 2.a
#i)
analyse_metrisch(titanic$Age)
variable = titanic$Age
statistiken <- list(
Mittelwert = mean(variable, na.rm = TRUE), # Mittelwert
Median = median(variable, na.rm = TRUE), # Median
Standardabweichung = sd(variable, na.rm = TRUE), # Standardabweichung
Minimum = min(variable, na.rm = TRUE), # Minimum
Maximum = max(variable, na.rm = TRUE), # Maximum
Quartile = quantile(variable, probs = c(0.25, 0.75), na.rm = TRUE),
# unteres und oberes Quartil
range = max(variable, na.rm = TRUE) - min(variable, na.rm = TRUE),
# range/ Spannweite
Interquartilsabstand = IQR(variable, na.rm = TRUE),
# Interquartilsabstand (oberes Quartil - unteres Quartil)
Modus = berechneModus(variable) # Nutzung der Modus-Helferfunktion
)
Mittelwert = mean(variable, na.rm = TRUE)
str(variable)
View(titanic)
variable = as.numeric(variable)
titanic$Age[is.na(Variable)]
titanic$Age[is.na(variable)]
# Einlesen der csv-Datei und speichern in der Variable titanic
titanic = read.csv("titanic.csv", sep = ",")
View(titanic)
# extrahiert aus der Spalte "Name" die Anrede der jeweiligen Person mit der
# Funktion sub() und schreibt diese in die neu erstellte Spalte "Title"
titanic$Title = sub(pattern = ".*, (.*?)\\..*", replacement = "\\1",
x = titanic$Name)
View(titanic)
titanic$Title[titanic$Title %in% c("Miss", "Ms", "Mlle")] = "Ms"
# Anrede Mrs und Mme werden zu Mrs zusammengefasst
# beschreiben eine verheiratete Frau
titanic$Title[titanic$Title %in% c("Mrs", "Mme")] = "Mrs"
# Anrede the Countess und Lady werden ebenfalls zu Ms zusammengefasst,
# da nichts über den Famlienstand bekannt ist
titanic$Title[titanic$Title %in% c("the Countess", "Lady")] = "Ms"
# Anrede Don, Rev, Dr, Sir, Capt, Jonkheer, Major und Col werden zu Mr
# zusammengefasst, da es somit später einfacher wird, fehlende Werte beim Alter
# mithilfe der Anrede zu ergänzen
titanic$Title[titanic$Title %in% c("Don", "Rev", "Dr", "Sir", "Capt",
"Jonkheer","Major", "Col")] = "Mr"
# codiere Variablen "Survived", "Sex" und "Embarked" als factor um
# Variable "Survived" als Faktor umkodieren
# --> 0 steht für nicht überlebt (no) und 1 steht für überlebt (yes)
titanic$Survived = factor(titanic$Survived,
levels = c(0,1), labels = c("no", "yes"))
# Variable "Sex" als Faktor umkodieren
titanic$Sex = factor(titanic$Sex,
levels = c("female", "male"), labels = c("female", "male"))
# Variable "Embarked" als Faktor umkodieren
titanic$Embarked = factor(titanic$Embarked,
levels = c("C", "Q", "S"),
labels = c("Cherbourg", "Queenstown", "Southampton"))
# Variable "Pclass" in einen ordered-factor überführen
titanic$Pclass = factor(titanic$Pclass,
levels = c("3", "2", "1"), labels = c("3", "2", "1"),
ordered = TRUE)
View(titanic)
median_age_per_title = aggregate(Age~Title, data = titanic,
FUN = function(x) median(x, na.rm = TRUE))
View(titanic)
for(title in unique(titanic$Title)) {
# bestimmt den Median für die aktuelle Anrede
median_age = median_age_per_title$Age[median_age_per_title$Title == title]
# ersetzt alle fehlenden Werte (NA) in der Spalte "Age" mit dem Median der
# aktuellen Anrede
titanic$Age[is.na(titanic$Age) & titanic$Title == title] = median_age
}
View(titanic)
titanic$Side <- NA  # Initialisiere die neue Variable mit NA
titanic$Deck <- NA
titanic$CabinNumbers <- NA
#Bestimmt Seite, Deck und Kabinen-Nummern aus einer Kabinenliste
extract_cabin_info <- function(cabin_string) {
cabins <- unlist(strsplit(cabin_string, " "))  # Teile die Kabinen in eine Liste auf
sides <- c()  # Vektor für dieSeite
decks <- c()  # Vektor für das Deck
cabin_numbers <- c()  # Vektor die Kabinen-Nummern
for (cabin in cabins) {
if (nchar(cabin) > 0) {  # Überprüfe, ob die Kabine nicht leer ist
cabin_number <- as.numeric(gsub("[^0-9]", "", cabin))  # Extrahiere die Nummer aus der Kabinenbezeichnung
if (!is.na(cabin_number)) {
sides <- c(sides, ifelse(cabin_number %% 2 == 1, "Steuerbord", "Backbord"))
# Ungerade Nummer = Steuerbord, gerade Nummer = Backbord
decks <- c(decks, substr(cabin, 1, 1))
# Der vorangehende Buchstabe wird als Deck betrachtet
cabin_numbers <- c(cabin_numbers, cabin_number)
# Speichert die extrahierte Zahl in cabin_numbers
}
}
}
return(list(Side = paste(unique(sides), collapse = ", "),
Deck = paste(unique(decks), collapse = ", "),
CabinNumbers = paste(unique(cabin_numbers), collapse = ", "))) }
# Hinweis: Bei mehreren Kabinenangaben (die nicht gleich sind)
# werden diese zu einem kommagetrennten String zusammengefasst.
# Wendet die Funktion auf jede Zeile im Datensatz an
for (i in seq_len(nrow(titanic))) {
if (titanic$Cabin[i] != "") {
cabin_info <- extract_cabin_info(titanic$Cabin[i])
# Speichert das Ergebnis in den neuen Spalten
titanic$Side[i] <- cabin_info$Side
titanic$Deck[i] <- cabin_info$Deck
titanic$CabinNumbers[i] <- cabin_info$CabinNumbers
View(titanic)
View(titanic)
View(titanic)
View(titanic)
View(titanic)
# Einlesen der csv-Datei und speichern in der Variable titanic
titanic = read.csv("titanic.csv", sep = ",")
View(titanic)
# Einlesen der csv-Datei und speichern in der Variable titanic
titanic = read.csv("titanic.csv", sep = ",")
# Einlesen der csv-Datei und speichern in der Variable titanic
titanic = read.csv("titanic.csv", sep = ",")
View(titanic)
titanic$Title = sub(pattern = ".*, (.*?)\\..*", replacement = "\\1",
x = titanic$Name)
# fasse unterschiedliche Anreden mit gleicher Bedeutung zusammen
# Anrede Miss, Ms und Mlle werden zu Ms zusammengefasst
# beschreiben eine junge unverheiratete Frau
titanic$Title[titanic$Title %in% c("Miss", "Ms", "Mlle")] = "Ms"
# Anrede Mrs und Mme werden zu Mrs zusammengefasst
# beschreiben eine verheiratete Frau
titanic$Title[titanic$Title %in% c("Mrs", "Mme")] = "Mrs"
# Anrede the Countess und Lady werden ebenfalls zu Ms zusammengefasst,
# da nichts über den Famlienstand bekannt ist
titanic$Title[titanic$Title %in% c("the Countess", "Lady")] = "Ms"
# Anrede Don, Rev, Dr, Sir, Capt, Jonkheer, Major und Col werden zu Mr
# zusammengefasst, da es somit später einfacher wird, fehlende Werte beim Alter
# mithilfe der Anrede zu ergänzen
titanic$Title[titanic$Title %in% c("Don", "Rev", "Dr", "Sir", "Capt",
"Jonkheer","Major", "Col")] = "Mr"
# codiere Variablen "Survived", "Sex" und "Embarked" als factor um
# Variable "Survived" als Faktor umkodieren
# --> 0 steht für nicht überlebt (no) und 1 steht für überlebt (yes)
titanic$Survived = factor(titanic$Survived,
levels = c(0,1), labels = c("no", "yes"))
# Variable "Sex" als Faktor umkodieren
titanic$Sex = factor(titanic$Sex,
levels = c("female", "male"), labels = c("female", "male"))
# Variable "Embarked" als Faktor umkodieren
titanic$Embarked = factor(titanic$Embarked,
levels = c("C", "Q", "S"),
labels = c("Cherbourg", "Queenstown", "Southampton"))
# Variable "Pclass" in einen ordered-factor überführen
titanic$Pclass = factor(titanic$Pclass,
levels = c("3", "2", "1"), labels = c("3", "2", "1"),
ordered = TRUE)
# fehlende Werte in der Variable "Age" mithilfe des Medians imputieren
# medianes Alter der Personen gruppiert nach den Anreden "Master", "Ms", "Mrs"
# und "Mr" wird mithilfe der Funktion aggregate() berechnet und in der Variable
# median_age_per_title gespeichert
median_age_per_title = aggregate(Age~Title, data = titanic,
FUN = function(x) median(x, na.rm = TRUE))
# ersetze die fehlenden Werte des Alters durch das mediane Alter der
# entsprechenden Anrede --> die Funktion unique() wird verwendet, damit die
# for-Schleife nur einmal pro Anrede und nicht für jede Zeile einzelnd läuft
for(title in unique(titanic$Title)) {
# bestimmt den Median für die aktuelle Anrede
median_age = median_age_per_title$Age[median_age_per_title$Title == title]
# ersetzt alle fehlenden Werte (NA) in der Spalte "Age" mit dem Median der
# aktuellen Anrede
titanic$Age[is.na(titanic$Age) & titanic$Title == title] = median_age
}
# Erstellt neue Variablen für Backbord oder Steuerbord, Deck und Kabinen-Nummern
titanic$Side <- NA  # Initialisiere die neue Variable mit NA
titanic$Deck <- NA
titanic$CabinNumbers <- NA
#Bestimmt Seite, Deck und Kabinen-Nummern aus einer Kabinenliste
extract_cabin_info <- function(cabin_string) {
cabins <- unlist(strsplit(cabin_string, " "))  # Teile die Kabinen in eine Liste auf
sides <- c()  # Vektor für dieSeite
decks <- c()  # Vektor für das Deck
cabin_numbers <- c()  # Vektor die Kabinen-Nummern
for (cabin in cabins) {
if (nchar(cabin) > 0) {  # Überprüfe, ob die Kabine nicht leer ist
cabin_number <- as.numeric(gsub("[^0-9]", "", cabin))  # Extrahiere die Nummer aus der Kabinenbezeichnung
if (!is.na(cabin_number)) {
sides <- c(sides, ifelse(cabin_number %% 2 == 1, "Steuerbord", "Backbord"))
# Ungerade Nummer = Steuerbord, gerade Nummer = Backbord
decks <- c(decks, substr(cabin, 1, 1))
# Der vorangehende Buchstabe wird als Deck betrachtet
cabin_numbers <- c(cabin_numbers, cabin_number)
# Speichert die extrahierte Zahl in cabin_numbers
}
}
}
return(list(Side = paste(unique(sides), collapse = ", "),
Deck = paste(unique(decks), collapse = ", "),
CabinNumbers = paste(unique(cabin_numbers), collapse = ", "))) }
# Hinweis: Bei mehreren Kabinenangaben (die nicht gleich sind)
# werden diese zu einem kommagetrennten String zusammengefasst.
# Wendet die Funktion auf jede Zeile im Datensatz an
for (i in seq_len(nrow(titanic))) {
if (titanic$Cabin[i] != "") {
cabin_info <- extract_cabin_info(titanic$Cabin[i])
# Speichert das Ergebnis in den neuen Spalten
titanic$Side[i] <- cabin_info$Side
titanic$Deck[i] <- cabin_info$Deck
titanic$CabinNumbers[i] <- cabin_info$CabinNumbers
}
}
#durch die Initialisierung mit Na sind Einträge mit unbekannter Kabinennummer bereits NA
# Entfernt die Variablen "PassengerId", "Name", "Ticket" und "Cabin"
titanic <- titanic[, !(names(titanic) %in% c("PassengerId", "Name", "Ticket", "Cabin"))]
View(titanic)
write.csv(titanic, "titanic_cleaned_richtig.csv")
getwd()
write.csv(titanic, "titanic_cleaned_richtig.csv")
write.csv(titanic, "titanic_cleaned_richtig2.csv")
source("Funktionen-R-Skript 2.R") # Helferfunktionen
titanic = read.csv("titanic_cleaned_richtig2.csv", sep = ",")
library(ggplot2)
# i) Funktion für metrische Variablen (angepasst):
analyse_metrisch <- function(variable) {
variable = as.numeric(variable)
statistiken <- list(
Mittelwert = mean(variable, na.rm = TRUE), # Mittelwert
Median = median(variable, na.rm = TRUE), # Median
Standardabweichung = sd(variable, na.rm = TRUE), # Standardabweichung
Minimum = min(variable, na.rm = TRUE), # Minimum
Maximum = max(variable, na.rm = TRUE), # Maximum
Quartile = quantile(variable, probs = c(0.25, 0.75), na.rm = TRUE),
# unteres und oberes Quartil
range = max(variable, na.rm = TRUE) - min(variable, na.rm = TRUE),
# range/ Spannweite
Interquartilsabstand = IQR(variable, na.rm = TRUE),
# Interquartilsabstand (oberes Quartil - unteres Quartil)
Modus = berechneModus(variable) # Nutzung der Modus-Helferfunktion
)
return(statistiken) # Rückgabe der Statistiken für metrische Variablen
}
# ii) Funktion für kategoriale Variablen:
analyse_kategorial <- function(variable) {
variable <- convertToFactor(variable) # Umwandlung falls nötig
# Häufigkeitstabelle (abs. Häufigkeit) für die Ausprägungen
# einer kategorialen Variable
absolute_häufigkeiten <- table(variable, useNA = "ifany")
# Argument useNA = "ifany" --> falls es fehlende Werte gibt, wird deren
# Häufigkeit in der Tabelle angezeigt
# relative Häufigkeitstabelle für die Ausprägungen
# einer kategorialen Variable
relative_häufigkeiten <- prop.table(absolute_häufigkeiten)
# Funktion prob.table wandelt die Häufigkeitstabelle (absolute_häufigkeiten)
# in eine relative Häufigkeitstabelle um
# Modus für kategoriale Variablen
modus <- berechneModus(variable) # Nutzung der Modus-Helferfunktion
# speichert Statistiken in einer Liste
statistiken <- list(
Absolute_Häufigkeiten = absolute_häufigkeiten,
Relative_Häufigkeiten = relative_häufigkeiten,
Modus = modus
)
return(statistiken) # Rückgabe der Statistiken für kategoriale Variablen
}
# iii)
# Funktion für bivariate deskriptive Statistiken
# zwischen zwei kategorialen Variablen (Kontingenztafel mit absoluter
# und mit relativer Häufigkeit)
zusammenhang_kategorial <- function(x, y) {
x <- convertToFactor(x)
y <- convertToFactor(y)
# Kontingenztafel mit absoluter Häufigkeit erstellen
abs_tabelle <- table(x, y)
# Kontingenztafel mit relativer Häufigkeit erstellen
rel_tabelle <- prop.table(abs_tabelle, margin = 1)
return(list(
"Kontingenztafel mit absoluter Haufigkeit" = abs_tabelle,
"Kontingenztafel mit relativer Haufigkeit" = rel_tabelle
))
}
# iv)
# Funktion für bivariate deskriptive Statistiken
# zwischen einer metrischen (x) und einer dichotomen (y) Variablen
zusammenhang_metrisch_dichotom <- function(x, y) {
y <- convertToFactor(y)
# Mittelwert, Median, Standardabweichung für jede Gruppe
summary_data <- data.frame(
Gruppe = levels(y),
Mittelwert = tapply(x, y, mean, na.rm = TRUE),
Median = tapply(x, y, median, na.rm = TRUE),
Std = tapply(x, y, sd, na.rm = TRUE)
)
return(summary_data)
}
# v) Funktion zur Visualisierung von 3 oder 4 kategorialen Variablen
visualisiere_kategorial <- function(data, var1, var2, var3, var4 = NULL) {
var1 <- convertToFactor(var1)
var2 <- convertToFactor(var2)
var3 <- convertToFactor(var3)
if (is.null(var4)) {
plot <- ggplot(data, aes_string(x = var1, fill = var2)) +
geom_bar(position = "dodge") +
facet_wrap(~ get(var3)) +
theme_minimal()
} else {
plot <- ggplot(data, aes_string(x = var1, fill = var2)) +
geom_bar(position = "dodge") +
facet_grid(get(var3) ~ get(var4)) +
theme_minimal()
}
return(visualisierungsHelfer(plot, "Visualisierung kategorialer Variablen"))
}
# vi) Weitere Funktionen zur Deskription und Visualisierung
# z.b Balkendiagramm für eine kategoriale Variable
balkendiagramm <- function(variable) {
library(ggplot2)  # ggplot2 laden
variable <- convertToFactor(variable)  # Umwandlung falls nötig
df <- data.frame(
Kategorie = names(table(variable)),
Häufigkeit = as.vector(table(variable))
)
plot <- ggplot(df, aes(x = Kategorie, y = Häufigkeit, fill = Kategorie)) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Kategorie") +
ylab("Häufigkeit")
return(visualisierungsHelfer(plot, "Balkendiagramm der kategorialen Variable"))
}
titanic = read.csv("titanic_cleaned_richtig2.csv", sep = ",")
source("Funktionen_R-Skript1.R") # Helferfunktionen
titanic = read.csv("titanic_cleaned_richtig2.csv", sep = ",")
titanic = read.csv("titanic_cleaned_richtig2.csv", sep = ",")
View(titanic)
titanic = read.csv("titanic_cleaned_richtig2.csv", sep = ";")
View(titanic)
titanic = read.csv("titanic_cleaned_richtig2.csv", sep = ",")
# Aufgabe 3
source("Funktionen_R-Skript1.R") # Helferfunktionen
titanic = read.csv("titanic_cleaned_richtig2.csv", sep = ",")
titanic = read.csv("titanic_cleaned_richtig2.csv", sep = ",")
